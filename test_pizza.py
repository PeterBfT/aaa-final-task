import pizza
from unittest.mock import patch
from click.testing import CliRunner


class TestPizza:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã pizza.py"""

    @patch('builtins.print')
    def test_dict(self, mock_print):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ dict –≤ –∫–ª–∞—Å—Å–µ PizzaRecipe"""
        pizza_example = pizza.PizzaRecipe('Ananasovaya', 'ananas', 'pizza')
        pizza_example.dict()
        mock_print.assert_called_with('Ananasovaya: ananas, pizza')

    @patch('builtins.print')
    def test_big_pizza(self, mock_print):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ big_pizza –≤ –∫–ª–∞—Å—Å–µ CookingPizza"""
        pizza_cooking_example = pizza.CookingPizza()
        pizza_cooking_example.big_pizza()
        mock_print.assert_called_with('üòé –ë–æ–ª—å—à–∞—è –ø–∏—Ü—Ü–∞')

    @patch('pizza.randint')
    def test_order_no_delivery_no_size(self, mock_randint):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã order,
        –ü–æ–¥–∞–µ—Ç—Å—è –Ω–∞ –≤—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã –∏–∑ —Å–ø–∏—Å–∫–∞
        """
        mock_randint.return_value = 25
        result = CliRunner().invoke(pizza.order, ['margherita'])
        exp_result = 'üë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ 25—Å!\nüè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ 25—Å!\n'
        assert result.output == exp_result

    @patch('pizza.randint')
    def test_order_delivery(self, mock_randint):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã order,
        –ü–æ–¥–∞–µ—Ç—Å—è –Ω–∞ –≤—Ö–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Ñ–ª–∞–≥ –¥–æ—Å—Ç–∞–≤–∫–∏
        """
        mock_randint.return_value = 25
        result = CliRunner().invoke(pizza.order, ['margherita', '--delivery'])
        exp_result = 'üë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ 25—Å!\nüõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ 25—Å!\n'
        assert result.output == exp_result

    @patch('pizza.randint')
    def test_order_size(self, mock_randint):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã order,
        –ü–æ–¥–∞–µ—Ç—Å—è –Ω–∞ –≤—Ö–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã –∏ —Ñ–ª–∞–≥ —Ä–∞–∑–º–µ—Ä–∞ –ø–∏—Ü—Ü—ã —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º XL
        """
        mock_randint.return_value = 25
        result = CliRunner().invoke(pizza.order, ['margherita', '--size=xL'])
        exp_result_ar = [
            'üòé –ë–æ–ª—å—à–∞—è –ø–∏—Ü—Ü–∞\n',
            'üë®‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ 25—Å!\n',
            'üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ 25—Å!\n'
        ]
        exp_result = ''.join(exp_result_ar)
        assert result.output == exp_result

    def test_order_wrong_pizza(self):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã order,
        –ü–æ–¥–∞–µ—Ç—Å—è –Ω–∞ –≤—Ö–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –º–µ–Ω—é
        """
        result = CliRunner().invoke(pizza.order, ['Ananasovaya'])
        exp_result = '–¢–∞–∫–æ–π –ø–∏—Ü—Ü—ã –ø–æ–∫–∞ –Ω–µ—Ç –≤ –Ω–∞—à–µ–º –º–µ–Ω—é\n'
        assert result.output == exp_result

    def test_menu(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã menu"""
        runner = CliRunner()
        result = runner.invoke(pizza.menu)
        exp_result_ar = [
            '- Margherita üßÄ: tomato sauce, mozzarella, tomatoes\n',
            '- Pepperoni üçï: tomato sauce, mozzarella, pepperoni\n',
            '- Hawaiian üçç: tomato sauce, mozzarella, chicken, pineapples\n'
        ]
        exp_result = ''.join(exp_result_ar)
        assert result.output == exp_result
